import{Polygon,Arc,Mesh,Canvas,roundedArc,setRoundedArcColor,roundedRectangle,generateGradient}from"./canvas.js";import{clamp,lerp,normalize,easeInOutCubic,slerpPoints}from"./math.js";import{smoothAnimate,animationLoopOuter,slideRight,sleep,slideLeft,createProgressBar,animateProgressBarWrapper,animateProgressBar,rippleButton,slideRightWrap,throttle}from"./animation.js";import{getOffset,once,getComputedVariable,emToPixels}from"./utils.js";import{Color}from"./colors.js";import{$,$$}from"./dollar.js";let eventObject,speedtestObject,speedtestData,canvasObject,meterObject={startAngle:.8*Math.PI,endAngle:1.1*(2*Math.PI),minValue:0,maxValue:100,lineWidth:2*emToPixels(getComputedVariable("font-size")),backgroundColor:getComputedVariable("--meter-background-color")},progressBarObject={color:"#fff",backgroundColor:meterObject.backgroundColor};const DOTS=`<div class="dot-container"><div class="dot-typing"></div></div>`,BLANK="&nbsp;",BORDER_RADIUS_PRIMARY=getComputedVariable("--border-radius-primary"),PROGRESS_BAR_GRADIENT=getComputedVariable("--progress-bar-gradient"),WINDOW_KEY="password",receiveMessage=function(c){const a=c.data;a.key===WINDOW_KEY?(eventObject=c,console.log(`Received event data of ${a}`),"start"===a.message&&onstart()):console.warn("Event data not accepted.")},postMessage=function(e,a){return new Promise((b,c)=>{null==e?c(new Error("The given event object was null.")):(console.log(`Posting event message of ${a.message}`),e.source.postMessage(a,e.origin),b(a))})},generateColorStops=function(f,a=.5){const b=Math.floor(1/a)+1;return Array(b).fill(0).map(function(b,c){const d=getComputedVariable(`--${f}-${c}`);return[c*a,d]})},generateInnerColorStops=function(e){const[a,b]=e,c=new Color(b);return c.opacity=.3,[a,c.colorString]},SPEEDTEST_STATES=Object.freeze({0:"not_started",1:"started",2:"download",3:"ping",4:"upload",5:"finished",6:"aborted"}),SPEEDTEST_DATA_MAPPING=Object.freeze({ping_amount:"pingStatus",download_amount:"dlStatus",upload_amount:"ulStatus",ping_progress:"pingStatus",download_progress:"dlProgress",upload_progress:"ulProgress"}),testStateObj={ping:-1,download:-1,upload:-1,prev_state:-1},updateTestState=function(i,a=!1){const j=speedtestData.testState+1,c=SPEEDTEST_STATES[j],d=i.prev_state,e=SPEEDTEST_STATES[d];if(a||"aborted"===c)for(const[a]of Object.entries(i))i[a]=-1;else{for(const[a,b]of Object.entries(i)){const f=b+1;if(a===c)1>b?i[a]=f:2===b&&j!==d&&(i[a]=0);else if(a===e&&0<b&&j!==d){i[e]=f;break}}i.prev_state=j}return i},hysteresisRecord={},hysteresis=function(h,i,b=.01,c=1/15){var d=Math.abs;const e=hysteresisRecord[i]||0,f=d(h-e);return f>b&&(h=lerp(c,e,h)),hysteresisRecord[i]=h,h},getStateAmount=function(e,a="amount"){const b=parseFloat(speedtestData[SPEEDTEST_DATA_MAPPING[e+"_"+a]]),c="amount"===a?99999:1;return Number.isNaN(b)?0:clamp(b,0,c)},getStateName=function(){const b=testStateObj.prev_state;return SPEEDTEST_STATES[b]},animateProgressBarEl=function(){animateProgressBarWrapper($("#progress-bar"),1e3,3)},openingAnimation=async function(g,a){const{dot:h,outerMeter:c,dial:d}=meterObject,b=function(e,a){canvasObject.clear(),c.mesh.draw(canvasObject,a),h.mesh.draw(canvasObject,a);const b=lerp(a,meterObject.startAngle,meterObject.startAngle+2*Math.PI);d.mesh.rotate(b,!0).scale(1).draw(canvasObject).rotate(-b,!0).scale(1),progressBarObject.mesh.draw(canvasObject,0)};await smoothAnimate(meterObject.endAngle,meterObject.startAngle,g,b,a)},closingAnimation=async function(g,a){const{dot:h,outerMeter:c,dial:d}=meterObject,b=function(e,a){canvasObject.clear(),a=clamp(1-a,1e-4,1),c.mesh.draw(canvasObject,a),h.mesh.draw(canvasObject,a);const g=lerp(a,meterObject.startAngle,4*Math.PI+meterObject.startAngle);d.mesh.rotate(g,!0).scale(a).draw(canvasObject).rotate(-g,!0).scale(1/a),progressBarObject.mesh.draw(canvasObject,a)};await smoothAnimate(meterObject.endAngle,meterObject.startAngle,g,b,a)},setUnitInfo=function(d,a){Object.keys(d).forEach(b=>{$(`.${b}`,a).innerHTML=d[b]})},getUnitAmountAndKind=function(d,a){null==a&&(a=getStateAmount(d));const e={};return"download"===d||"upload"===d?(1e3>a?e.unit="Mbps":1e3<=a&&(e.unit="Gbps",a/=1e3),e.amount=a.toPrecision(3)):"ping"===d&&(1e3>a?e.unit="ms":1e3<=a&&(e.unit="s",a/=1e3),e.amount=a.toPrecision(3)),e},drawMeter=function(l){const{dot:a,outerMeter:b,innerMeter:c,dial:d,backgroundColor:e}=meterObject;let f=e,m=e;if("download"===l?(f=b.dlColor,m=c.dlColor):"upload"==l&&(f=b.ulColor,m=c.ulColor),!l)setRoundedArcColor(b.mesh,e),b.mesh.draw(canvasObject,1),a.mesh.draw(canvasObject),d.mesh.rotate(meterObject.startAngle,!0).draw(canvasObject).rotate(-meterObject.startAngle,!0);else{const g=getStateAmount(l);let h=normalize(clamp(g,meterObject.minValue,meterObject.maxValue),meterObject.minValue,meterObject.maxValue);h=hysteresis(h,"meter");const i=lerp(h,meterObject.startAngle,meterObject.endAngle);setRoundedArcColor(b.mesh,e),b.mesh.draw(canvasObject,1),setRoundedArcColor(b.mesh,f),b.mesh.draw(canvasObject,h),b.mesh.draw(canvasObject,h),setRoundedArcColor(b.mesh,e),setRoundedArcColor(c.mesh,m),c.mesh.draw(canvasObject,h),a.mesh.draw(canvasObject),d.mesh.rotate(i,!0).draw(canvasObject).rotate(-i,!0)}},drawMeterProgressBar=function(d){if(!d)progressBarObject.mesh.draw(canvasObject,0);else{const a=getStateAmount(d,"progress");let b=clamp(a,0,1);b=hysteresis(b,"progressBar"),progressBarObject.mesh.draw(canvasObject,b)}},updateStateInfo=function(e,a){const b=$(`#${e} .unit-container`),c=a[e];if(0===c)$(".amount",b).innerHTML=DOTS;else if(1===c);else if(2===c){const c=getUnitAmountAndKind(e);animateProgressBarEl(),b.classList.remove("in-progress"),setUnitInfo(c,b),a[e]=3}},animationLoopUpdate=function(){return!1},animationLoopDraw=function(){if(null==speedtestData||3>speedtestObject.getState())return!1;const d=$(".speedtest-container .info-container"),a=getStateName();if(updateTestState(testStateObj),"ping"===a||"download"===a||"upload"===a){updateStateInfo(a,testStateObj),canvasObject.clear();let b=getUnitAmountAndKind(a);"ping"===a?b=Object.assign(b,{footer:"Pinging..."}):"download"===a?b=Object.assign(b,{kind:"\u2193",footer:"Downloading..."}):"upload"===a&&(b=Object.assign(b,{kind:"\u2191",footer:"Uploading..."})),drawMeter(a),drawMeterProgressBar(a),setUnitInfo(b,d)}},animationLoopInit=function(){const E=$("#meter"),a=E.getContext("2d"),b=getOffset(E),c=window.devicePixelRatio||1,d=meterObject.lineWidth*c;E.width=b.width*c,E.height=b.height*c;const e=E.width/2-d/2,f=e-1.25*d,g=E.width/2,h=E.height/2;canvasObject=new Canvas(E,a,[g,h]);const i=d/1.2,j=.8*f,k=i/1.8,l=[[0,0],[i,0]],m=slerpPoints(l[0],l[1]),n=[...m,[i-k,-j],[k,-j]],o=new Polygon(n,null,null,"white");o.translate(-o.centroid[0],0).rotate(90,!1);const p=roundedArc(0,0,e,meterObject.startAngle,meterObject.endAngle,meterObject.backgroundColor,d),q=roundedArc(0,0,f,meterObject.startAngle,meterObject.endAngle,meterObject.backgroundColor,d),r=new Arc(0,0,e/5,0,2*Math.PI,meterObject.backgroundColor,1);r.fillColor=meterObject.backgroundColor;const s=generateColorStops("dl-color"),t=generateColorStops("ul-color"),u=generateGradient(E,s),v=generateGradient(E,t),w=generateGradient(E,s.map(generateInnerColorStops)),x=generateGradient(E,t.map(generateInnerColorStops));meterObject=Object.assign(meterObject,{outerMeter:{mesh:p,radius:e,dlColor:u,ulColor:v},innerMeter:{mesh:q,radius:f,dlColor:w,ulColor:x},dot:{color:"black",radius:e/5,mesh:r},dial:{color:meterObject.backgroundColor,mesh:o}});const y=e,z=d/4,A=roundedRectangle(0,0,y,z,progressBarObject.color),B=roundedRectangle(0,0,y,z,progressBarObject.backgroundColor),C=new Mesh(B,A).translate(0,e/1.5-z/2);C.draw=function(c,a){return this.shapes[0].draw(c,1),this.shapes[1].draw(c,a),this},progressBarObject=Object.assign(progressBarObject,{mesh:C})},speedtestOnUpdate=function(b){speedtestData=b},speedtestOnEnd=function(b){b||onend()};async function onload(){speedtestObject=new Speedtest,speedtestObject.setParameter("getIp_ispInfo",!1),speedtestObject.setParameter("getIp_ispInfo_distance",!1),speedtestObject.onupdate=speedtestOnUpdate,speedtestObject.onend=speedtestOnEnd,createProgressBar($("#progress-bar"),[PROGRESS_BAR_GRADIENT],{styles:{"border-top-left-radius":BORDER_RADIUS_PRIMARY,"border-bottom-left-radius":BORDER_RADIUS_PRIMARY}},{styles:{"border-top-right-radius":BORDER_RADIUS_PRIMARY,"border-bottom-right-radius":BORDER_RADIUS_PRIMARY}})}const openingSlide=once(async function(){const f=$(".speedtest-container"),a=$("#info-progress-container"),b=$("#start-pane"),c=$("#complete-pane"),d=window.innerWidth;slideRight([f,a,c],d,0,1),[f,a].forEach(b=>b.classList.remove("hidden")),await slideLeft(b,-d,0,500),b.classList.add("hidden"),slideLeft([f,a],0,d,500),openingAnimation(2e3,easeInOutCubic)}),onstart=throttle(async function(){const f=$("#start-btn"),a=$("#progress-bar"),b=$(".speedtest-container .info-container"),c=async function(){f.classList.add("running"),$(".text",f).innerHTML="Stop",openingSlide(),speedtestObject.start()},d=async function(){speedtestObject.abort(),f.classList.remove("running"),$(".text",f).innerHTML="Start",updateTestState(testStateObj,!0),openingAnimation(2e3,easeInOutCubic),await sleep(500),setUnitInfo({amount:BLANK,unit:BLANK,footer:"Waiting...",kind:BLANK},b),$$(".info-progress-container .unit-container").forEach(b=>{b.classList.add("in-progress"),setUnitInfo({amount:BLANK},b)}),animateProgressBar(a,0,parseFloat(a.getAttribute("percent-complete"))||0,1e3)};3===speedtestObject.getState()?d():c()},500);async function onend(){const g=$("#start-btn"),a=$(".speedtest-container"),b=$("#complete-pane"),c=window.innerWidth,d=(speedtestData.clientIp+"").trim().split(" ")[0].trim(),e={message:"complete",key:"password",data:{dlStatus:speedtestData.dlStatus,ulStatus:speedtestData.ulStatus,pingStatus:speedtestData.pingStatus,jitterStatus:speedtestData.jitterStatus,ip:d}};postMessage(eventObject,e),g.classList.toggle("running"),await closingAnimation(2e3,easeInOutCubic),await slideLeft(a,-c,0,500),a.classList.add("hidden"),slideRight(b,0,-c,500),b.classList.remove("hidden"),await slideRightWrap(g,0,0,500,function(){$(".text",g).innerHTML="Next \u2192"}),await sleep(2e3)}window.onload=function(){onload(),animationLoopInit(),animationLoopOuter(animationLoopUpdate,animationLoopDraw)},$("#start-btn").on("click",function(d){const a=this;rippleButton(d,a,$(".ripple",a),15,0,1e3);const b=getStateName();"finished"===b?postMessage(eventObject,{message:"next",key:"password",data:{}}).catch(()=>{console.error("Cannot post to null event object. Aborting."),$(".modal").classList.toggle("visible")}):onstart()}),$(window).on("click touchend",function(c){const a=$(".modal");(c.target==a||a.contains(c.target))&&a.classList.toggle("visible")}),$(window).on("message",receiveMessage);