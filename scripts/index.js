import{Polygon,Arc,Mesh,Canvas,roundedArc,setRoundedArcColor,roundedRectangle,generateGradient}from"./canvas.js";import{clamp,lerp,normalize,easeInOutCubic,slerpPoints}from"./math.js";import{smoothAnimate,animationLoopOuter,slideRight,sleep,slideLeft,createProgressBar,animateProgressBarWrapper,animateProgressBar,rippleButton,slideRightWrap,throttle}from"./animation.js";import{getOffset,once,getComputedVariable,emToPixels}from"./utils.js";import{Color}from"./colors.js";import{$,$$}from"./dollar.js";let eventObject,speedtestObject,speedtestData,canvasObject,meterObject={startAngle:.8*Math.PI,endAngle:1.1*(2*Math.PI),minValue:0,maxValue:100,lineWidth:2*emToPixels(getComputedVariable("font-size")),backgroundColor:getComputedVariable("--meter-background-color")},progressBarObject={color:"#fff",backgroundColor:meterObject.backgroundColor};const DOTS=`<div class="dot-container"><div class="dot-typing"></div></div>`,BLANK="&nbsp;",BORDER_RADIUS_PRIMARY=getComputedVariable("--border-radius-primary"),PROGRESS_BAR_GRADIENT=getComputedVariable("--progress-bar-gradient"),WINDOW_KEY="password",receiveMessage=function(a){const b=a.data;b.key===WINDOW_KEY?(eventObject=a,console.log(`Received event data of ${b}`),"start"===b.message&&onstart()):console.warn("Event data not accepted.")},postMessage=function(a,b){return new Promise((c,d)=>{null==a?d(new Error("The given event object was null.")):(console.log(`Posting event message of ${b.message}`),a.source.postMessage(b,a.origin),c(b))})},generateColorStops=function(a,b=.5){const c=Math.floor(1/b)+1;return Array(c).fill(0).map(function(c,d){const e=getComputedVariable(`--${a}-${d}`);return[d*b,e]})},generateInnerColorStops=function(a){const[b,c]=a,d=new Color(c);return d.opacity=.3,[b,d.colorString]},SPEEDTEST_STATES=Object.freeze({0:"not_started",1:"started",2:"download",3:"ping",4:"upload",5:"finished",6:"aborted"}),SPEEDTEST_DATA_MAPPING=Object.freeze({ping_amount:"pingStatus",download_amount:"dlStatus",upload_amount:"ulStatus",ping_progress:"pingStatus",download_progress:"dlProgress",upload_progress:"ulProgress"}),testStateObj={ping:-1,download:-1,upload:-1,prev_state:-1},updateTestState=function(a,b=!1){const c=speedtestData.testState+1,d=SPEEDTEST_STATES[c],e=a.prev_state,f=SPEEDTEST_STATES[e];if(b||"aborted"===d)for(const[b]of Object.entries(a))a[b]=-1;else{for(const[b,g]of Object.entries(a)){const h=g+1;if(b===d)1>g?a[b]=h:2===g&&c!==e&&(a[b]=0);else if(b===f&&0<g&&c!==e){a[f]=h;break}}a.prev_state=c}return a},hysteresisRecord={},hysteresis=function(a,b,c=.01,d=1/15){var e=Math.abs;const f=hysteresisRecord[b]||0,g=e(a-f);return g>c&&(a=lerp(d,f,a)),hysteresisRecord[b]=a,a},getStateAmount=function(a,b="amount"){const c=parseFloat(speedtestData[SPEEDTEST_DATA_MAPPING[a+"_"+b]]),d="amount"===b?99999:1;return Number.isNaN(c)?0:clamp(c,0,d)},getStateName=function(){const a=testStateObj.prev_state;return SPEEDTEST_STATES[a]},animateProgressBarEl=function(){animateProgressBarWrapper($("#progress-bar"),1e3,3)},openingAnimation=async function(a,b){const{dot:c,outerMeter:d,dial:e}=meterObject,f=function(a,b){canvasObject.clear(),d.mesh.draw(canvasObject,b),c.mesh.draw(canvasObject,b);const f=lerp(b,meterObject.startAngle,meterObject.startAngle+2*Math.PI);e.mesh.rotate(f,!0).scale(1).draw(canvasObject).rotate(-f,!0).scale(1),progressBarObject.mesh.draw(canvasObject,0)};await smoothAnimate(meterObject.endAngle,meterObject.startAngle,a,f,b)},closingAnimation=async function(a,b){const{dot:c,outerMeter:d,dial:e}=meterObject,f=function(a,b){canvasObject.clear(),b=clamp(1-b,1e-4,1),d.mesh.draw(canvasObject,b),c.mesh.draw(canvasObject,b);const f=lerp(b,meterObject.startAngle,4*Math.PI+meterObject.startAngle);e.mesh.rotate(f,!0).scale(b).draw(canvasObject).rotate(-f,!0).scale(1/b),progressBarObject.mesh.draw(canvasObject,b)};await smoothAnimate(meterObject.endAngle,meterObject.startAngle,a,f,b)},setUnitInfo=function(a,b){Object.keys(a).forEach(c=>{$(`.${c}`,b).innerHTML=a[c]})},getUnitAmountAndKind=function(a,b){null==b&&(b=getStateAmount(a));const c={};return"download"===a||"upload"===a?(1e3>b?c.unit="Mbps":1e3<=b&&(c.unit="Gbps",b/=1e3),c.amount=b.toPrecision(3)):"ping"===a&&(1e3>b?c.unit="ms":1e3<=b&&(c.unit="s",b/=1e3),c.amount=b.toPrecision(3)),c},drawMeter=function(a){const{dot:b,outerMeter:c,innerMeter:d,dial:e,backgroundColor:f}=meterObject;let g=f,h=f;if("download"===a?(g=c.dlColor,h=d.dlColor):"upload"==a&&(g=c.ulColor,h=d.ulColor),!a)setRoundedArcColor(c.mesh,f),c.mesh.draw(canvasObject,1),b.mesh.draw(canvasObject),e.mesh.rotate(meterObject.startAngle,!0).draw(canvasObject).rotate(-meterObject.startAngle,!0);else{const i=getStateAmount(a);let j=normalize(clamp(i,meterObject.minValue,meterObject.maxValue),meterObject.minValue,meterObject.maxValue);j=hysteresis(j,"meter");const k=lerp(j,meterObject.startAngle,meterObject.endAngle);setRoundedArcColor(c.mesh,f),c.mesh.draw(canvasObject,1),setRoundedArcColor(c.mesh,g),c.mesh.draw(canvasObject,j),c.mesh.draw(canvasObject,j),setRoundedArcColor(c.mesh,f),setRoundedArcColor(d.mesh,h),d.mesh.draw(canvasObject,j),b.mesh.draw(canvasObject),e.mesh.rotate(k,!0).draw(canvasObject).rotate(-k,!0)}},drawMeterProgressBar=function(a){if(!a)progressBarObject.mesh.draw(canvasObject,0);else{const b=getStateAmount(a,"progress");let c=clamp(b,0,1);c=hysteresis(c,"progressBar"),progressBarObject.mesh.draw(canvasObject,c)}},updateStateInfo=function(a,b){const c=$(`#${a} .unit-container`),d=b[a];if(0===d)$(".amount",c).innerHTML=DOTS;else if(1===d);else if(2===d){const d=getUnitAmountAndKind(a);animateProgressBarEl(),c.classList.remove("in-progress"),setUnitInfo(d,c),b[a]=3}},animationLoopUpdate=function(){return!1},animationLoopDraw=function(){if(null==speedtestData||3>speedtestObject.getState())return!1;const a=$(".speedtest-container .info-container"),b=getStateName();if(updateTestState(testStateObj),"ping"===b||"download"===b||"upload"===b){updateStateInfo(b,testStateObj),canvasObject.clear();let c=getUnitAmountAndKind(b);"ping"===b?c=Object.assign(c,{footer:"Pinging..."}):"download"===b?c=Object.assign(c,{kind:"\u2193",footer:"Downloading..."}):"upload"===b&&(c=Object.assign(c,{kind:"\u2191",footer:"Uploading..."})),drawMeter(b),drawMeterProgressBar(b),setUnitInfo(c,a)}},animationLoopInit=function(){const a=$("#meter"),b=a.getContext("2d"),c=getOffset(a),d=window.devicePixelRatio||1,e=meterObject.lineWidth*d;a.width=c.width*d,a.height=c.height*d;const f=a.width/2-e/2,g=f-1.25*e,h=a.width/2,i=a.height/2;canvasObject=new Canvas(a,b,[h,i]);const j=e/1.2,k=.8*g,l=j/1.8,m=[[0,0],[j,0]],n=slerpPoints(m[0],m[1]),o=[...n,[j-l,-k],[l,-k]],p=new Polygon(o,null,null,"white");p.translate(-p.centroid[0],0).rotate(90,!1);const q=roundedArc(0,0,f,meterObject.startAngle,meterObject.endAngle,meterObject.backgroundColor,e),r=roundedArc(0,0,g,meterObject.startAngle,meterObject.endAngle,meterObject.backgroundColor,e),s=new Arc(0,0,f/5,0,2*Math.PI,meterObject.backgroundColor,1);s.fillColor=meterObject.backgroundColor;const t=generateColorStops("dl-color"),u=generateColorStops("ul-color"),v=generateGradient(a,t),w=generateGradient(a,u),x=generateGradient(a,t.map(generateInnerColorStops)),y=generateGradient(a,u.map(generateInnerColorStops));meterObject=Object.assign(meterObject,{outerMeter:{mesh:q,radius:f,dlColor:v,ulColor:w},innerMeter:{mesh:r,radius:g,dlColor:x,ulColor:y},dot:{color:"black",radius:f/5,mesh:s},dial:{color:meterObject.backgroundColor,mesh:p}});const z=f,A=e/4,B=roundedRectangle(0,0,z,A,progressBarObject.color),C=roundedRectangle(0,0,z,A,progressBarObject.backgroundColor),D=new Mesh(C,B).translate(0,f/1.5-A/2);D.draw=function(a,b){return this.shapes[0].draw(a,1),this.shapes[1].draw(a,b),this},progressBarObject=Object.assign(progressBarObject,{mesh:D})},speedtestOnUpdate=function(a){speedtestData=a},speedtestOnEnd=function(a){a||onend()};async function onload(){speedtestObject=new Speedtest,speedtestObject.setParameter("getIp_ispInfo",!1),speedtestObject.setParameter("getIp_ispInfo_distance",!1),speedtestObject.onupdate=speedtestOnUpdate,speedtestObject.onend=speedtestOnEnd,createProgressBar($("#progress-bar"),[PROGRESS_BAR_GRADIENT],{styles:{"border-top-left-radius":BORDER_RADIUS_PRIMARY,"border-bottom-left-radius":BORDER_RADIUS_PRIMARY}},{styles:{"border-top-right-radius":BORDER_RADIUS_PRIMARY,"border-bottom-right-radius":BORDER_RADIUS_PRIMARY}})}const openingSlide=once(async function(){const a=$(".speedtest-container"),b=$("#info-progress-container"),c=$("#start-pane"),d=$("#complete-pane"),e=window.innerWidth;slideRight([a,b,d],e,0,1),[a,b].forEach(a=>a.classList.remove("hidden")),await slideLeft(c,-e,0,500),c.classList.add("hidden"),slideLeft([a,b],0,e,500),openingAnimation(2e3,easeInOutCubic)}),onstart=throttle(async function(){const a=$("#start-btn"),b=$("#progress-bar"),c=$(".speedtest-container .info-container"),d=async function(){a.classList.add("running"),$(".text",a).innerHTML="Stop",openingSlide(),speedtestObject.start()},e=async function(){speedtestObject.abort(),a.classList.remove("running"),$(".text",a).innerHTML="Start",updateTestState(testStateObj,!0),openingAnimation(2e3,easeInOutCubic),await sleep(500),setUnitInfo({amount:BLANK,unit:BLANK,footer:BLANK,kind:BLANK},c),$$(".info-progress-container .unit-container").forEach(a=>{a.classList.add("in-progress"),setUnitInfo({amount:BLANK},a)}),animateProgressBar(b,0,parseFloat(b.getAttribute("percent-complete"))||0,1e3)};3===speedtestObject.getState()?e():d()},500);async function onend(){const a=$("#start-btn"),b=$(".speedtest-container"),c=$("#complete-pane"),d=window.innerWidth,e=(speedtestData.clientIp+"").trim().split(" ")[0].trim(),f={message:"complete",key:"password",data:{dlStatus:speedtestData.dlStatus,ulStatus:speedtestData.ulStatus,pingStatus:speedtestData.pingStatus,jitterStatus:speedtestData.jitterStatus,ip:e}};postMessage(eventObject,f),a.classList.toggle("running"),await closingAnimation(2e3,easeInOutCubic),await slideLeft(b,-d,0,500),b.classList.add("hidden"),slideRight(c,0,-d,500),c.classList.remove("hidden"),await slideRightWrap(a,0,0,500,function(){$(".text",a).innerHTML="Next \u2192"}),await sleep(2e3)}window.onload=function(){onload(),animationLoopInit(),animationLoopOuter(animationLoopUpdate,animationLoopDraw)},$("#start-btn").on("click",function(a){const b=this;rippleButton(a,b,$(".ripple",b),15,0,1000);const c=getStateName();if("finished"===c){postMessage(eventObject,{message:"next",key:"password",data:{}}).catch(()=>{console.error("Cannot post to null event object. Aborting."),$(".modal").classList.toggle("visible")})}else onstart()}),$(window).on("click touchend",function(a){const b=$(".modal");(a.target==b||b.contains(a.target))&&b.classList.toggle("visible")}),$(window).on("message",receiveMessage);